/* Hash PatID:1078 *//* only one point correct 5/25 *//* AC finally 2016-7-28 *//* learn to find a prime,and judge whether a digit  *//* is a prime or not is pretty important */#include<vector>#include<iostream>#include<cmath>#define position intusing namespace std;typedef struct Cell{	int key;	bool Empty;}Cell;typedef struct HashTable{	int tableSize;	Cell *theCells;}HashTable;void initHashTable(HashTable* &H){	for(int i=0;i<H->tableSize;i++){		H->theCells[i].Empty=true;	}}position find(HashTable* &H,int key){	long int cur_pos=key%(H->tableSize);	//printf("cur_pos: %ld",cur_pos);	int collisionNum=0;	/* if the seats are taken,we'll detect a right position */	while(H->theCells[cur_pos].Empty==false){		++collisionNum;		cur_pos+=2*collisionNum-1;		if(cur_pos>=H->tableSize){			cur_pos%=H->tableSize;		}		//cout<<"cur_pos: "<<cur_pos<<endl;		/* if we've detect 20 times or more,we may consider we failed */		/* to find a right position in this situation */		 if(collisionNum>=10000){			 cur_pos=-1;			 break;		 }	}	//printf("we have devtected %d times\n",collisionNum);	return cur_pos;}bool isPrime(const int &a){	bool flag=true;    if(a==1){		return false;	}	if(a==2||a==3){		return true;	}	for(int i=2;i*i<=a;i++){		if(a%i==0){			flag=false;			break;		}	}	return flag;}int nextPrime(int a){	int n=a;	while(!isPrime(n)){		n++;	}	return n;}int main(){	freopen("D:\\in.txt","r",stdin);	bool firstPrint=true;	int size,n;	int temp;	position pos;	HashTable *H=(HashTable *)malloc(sizeof(HashTable));	scanf("%d%d",&size,&n);	H->tableSize=nextPrime(size);	H->theCells=(Cell *)malloc(H->tableSize*sizeof(Cell));	/* to set every cell's Empty atrribute to be true */	initHashTable(H);	for(int i=0;i<n;i++){		scanf("%d",&temp);		pos=find(H,temp);		if(pos==-1){			if(firstPrint){				printf("-");				firstPrint=false;			}			else{				printf(" -");				}		}		else{			H->theCells[pos].key=temp;			H->theCells[pos].Empty=false;			if(firstPrint){				printf("%d",pos);				firstPrint=false;			}			else{			  printf(" %d",pos);		  			}		}	}	printf("\n");	return 0;}