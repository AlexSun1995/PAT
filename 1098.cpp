/* 1098. Insertion or Heap Sort (25) *//* 19/25... */#include<iostream>#include<cmath>#include<vector>#include<queue>#include<algorithm>#include<map>#include<set>#define LeftChild(i) (2*(i)+1) using namespace std;void insertSort(int *B,int n){	bool flag=false;	for(int i=1;i<n;i++)    {		int tmp=B[i];		int j;		for(j=i;j>0&&tmp<B[j-1];j--)		{		    B[j]=B[j-1];			flag=true;		}		B[j]=tmp;		if(flag) break;	}	printf("%d",B[0]);	for(int i=1;i<n;i++) printf(" %d",B[i]);	printf("\n");}void percDown(int B[],int i,int size){	int child;	int tmp;	for(tmp=B[i];LeftChild(i)<=size-1;i=child)	{		//cout<<"consider lc: "<<LeftChild(i)<<endl;		child=LeftChild(i);		if(child+1<size&&B[child+1]>B[child]) child++;		if(B[child]>tmp) B[i]=B[child];		else break;	}	B[i]=tmp;	//for(int i=1;i<size;i++) printf("***%d",B[i]);	//printf("\n");}int main(){	freopen("D:\\in.txt","r",stdin);	int A[105];	int B[105];	vector<int> vec;	int n;	scanf("%d",&n);	vec.resize(n);	for(int i=0;i<n;i++)	{		scanf("%d",&A[i]);		vec[i]=A[i];	}    for(int i=0;i<n;i++)	{		scanf("%d",&B[i]);	}    sort(vec.begin(),vec.end());	int isInsert=0;	int isHeap=0;    for(int i=0;i<n;i++)    {	 if(B[n-1-i]==vec[n-1-i]){		 for(int j=0;j<=i;j++)		 {			if(B[j]>B[i]){				isHeap=true;				break;			} 		 }		 if(isHeap) break;	   }	}    if(isHeap){		printf("Heap Sort\n");		/* the real size to be sort. */		int size=n;		for(int i=n-1;i>0;i--)		{			if(vec[i]==B[i]) size--;		}		for(int i=size/2;i>=0;i--) percDown(B,i,size);		swap(B[0],B[size-1]);		percDown(B,0,size-1);		printf("%d",B[0]);		for(int i=1;i<n;i++) printf(" %d",B[i]);		printf("\n");	}     else if(!isHeap){		printf("Insertion Sort\n");		insertSort(B,n);	}		   return 0;	}   /* ***********!!!!!************************ *//* PAT 1098 Insertion or Heap Sort */#include<vector>#include<algorithm>#include<iostream>using namespace std;vector<int> vec2;bool insFlag = false;bool heapFlag=false;bool iSort(int left,int right,vector<int> &vec1){	for(int i=left+1;i<=right;i++)	{		int tmp=vec1[i];		int j;		for(j=i-1;vec1[j]>tmp&&j>=0;j--)		{			vec1[j+1]=vec1[j];		}		vec1[j+1]=tmp;		if(insFlag)		{			printf("%d",vec1[0]);			for(int i=1;i<vec1.size();i++) printf(" %d",vec1[i]);			printf("\n");			return true;		}		if(vec1==vec2)		{			insFlag=true;			printf("Insertion Sort\n");		}	}	return false;}void percDown(vector<int> &vec3,int i,int n){	int tmp;	int child;	for(int tmp=vec3[i];2*i<=n;i=child)	{		child=2*i;		if(child+1<=n&&vec3[child]<vec3[child+1]) child++;		if(tmp<vec3[child]) swap(vec3[i],vec3[child]);		else break;	}}/* vec3 must start from 1 */void heapSort(vector<int> &vec3){	int size=vec3.size()-1;	int child;	while(size>=1)	{	    for(int i=size/2;i>=1;i--)	    {		   percDown(vec3,i,size);	    }	   swap(vec3[1],vec3[size]);		size--;		percDown(vec3,1,size);		//for(int t=1;t<vec3.size();t++)  cout<<vec3[t]<<" ";		//cout<<endl;		vector<int> vec4(vec3);		vec4.erase(vec4.begin());		if(heapFlag){			printf("%d",vec4[0]);			for(int j=1;j<vec4.size();j++) printf(" %d",vec4[j]);			printf("\n");			return;		}		if(vec4==vec2){			heapFlag=true;			printf("Heap Sort\n");		}	}}int main(){	//freopen("D:\\in.txt","r",stdin);	int n;	scanf("%d",&n);	vector<int> vec1(n);	vec2.resize(n);	for(int i=0;i<n;i++) scanf("%d",&vec1[i]);	for(int i=0;i<n;i++) scanf("%d",&vec2[i]);	vector<int> vec3(vec1);	vec3.insert(vec3.begin(),-1);	if(iSort(0,n-1,vec1)) return 0;	heapSort(vec3);	return 0;}