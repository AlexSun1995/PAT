/* Phone Bills  patId:1016 *//* starting time: 2016-6-5 09:21 am *//* submit time : 2016-6-5 14:20 too long... *//* 18/25 2 test case wrong answer... *//* can not find the reason..... */#include<iostream>#include<stack>#include<algorithm>#include<string>#include<cstring>#include<vector>using namespace std;typedef struct record{	string user;	int month,day,hour,min;	int total;	bool isOnline;}record;bool myComp(const record &a,const record &b){	if(a.user!=b.user) return a.user<b.user;	else return a.total<b.total;}int main(){	freopen("D:\\in.txt","r",stdin);	int rate[24];	int n;	char online[10];	vector<record> vec;	record temp;	for(int i=0;i<24;i++) scanf("%d",&rate[i]);	cin>>n;	while(n--){		cin>>temp.user;		scanf("%d:%d:%d:%d",&temp.month,&temp.day,&temp.hour,&temp.min);		scanf("%s",online);		if(strcmp(online,"on-line")==0) temp.isOnline=true;		else temp.isOnline=false;		temp.total=temp.day*24*60+temp.hour*60+temp.min;		vec.push_back(temp);	}	sort(vec.begin(),vec.end(),myComp);	vector<record>::iterator iter;	for(iter=vec.begin();iter!=vec.end();){		  string cur_user=iter->user;		  //cout<<"now conside: "<<cur_user<<endl;		   vector<record> cur_que;		   cur_que.push_back(*iter);		   vector<record>::iterator iter2=iter+1;		   //why?		   while(iter2!=vec.end()&&iter2->user==cur_user){			    cur_que.push_back(*iter2);				//cout<<"we push "<<endl;				iter2++;		   }		   vector<record>::iterator iter3=cur_que.begin();		   stack<record> matchQue;		   float totalSum=0;   		   cout<<iter3->user;		   printf(" %02d\n",iter3->month);		   for(;iter3!=cur_que.end();iter3++){			     if(iter3->isOnline)  {					 matchQue.push(*iter3);				 }				 else if(!iter3->isOnline){					 //empty? then discard					 if(matchQue.empty()) {						 continue;					 }                     else{						int preD,preH,preM;						preD=matchQue.top().day;						preM=matchQue.top().min;						preH=matchQue.top().hour;						while(!matchQue.empty()) matchQue.pop();						printf("%02d:%02d:%02d",preD,preH,preM);						printf(" %02d:%02d:%02d",iter3->day,iter3->hour,iter3->min);						fflush(stdout);						int centSum,timeSum;						centSum=timeSum=0;						while(preD!=iter3->day||preH!=iter3->hour||preM!=iter3->min){							  preM++;							  //cout<<"Day: "<<preD<<"Hour: "<<preH<<" Min: "<<preM<<endl;							  timeSum++;							  centSum+=rate[preH];							  //cout<<"here?"<<endl;							  if(preM==60){								  preM=0;								  preH++;							  }							  if(preH==24){								 preH=0;                                 preD++;								 							  }						}						printf(" %d",timeSum);						printf(" $%.2f\n",(float)centSum/100);						totalSum+=(float)centSum/100;					 }					 				 }		   }		   printf("Total amount: $%.2f\n",totalSum);		   iter=iter2;	}	return 0;}/* baigui sun from csdn 25/25 *//***********************************//***********************************/#include<iostream>  using namespace std;  #include<vector>  #include<string>  #include<algorithm> struct Call  {      string name;      int month;      int date;      int hour;      int minute;      int total;      string status;  };    int charge[24];  vector<Call> all_calls;  vector<Call> format_calls;    bool compare(Call a,Call b)  {      if(a.name < b.name)          return 1;      else if(a.name == b.name && a.total < b.total)          return 1;      else          return 0;  }    void show(Call c)  {      cout<<c.name<<" ";      cout<<c.month<<":"<<c.date<<":"<<c.hour<<":"<<c.minute<<" ";      cout<<c.status<<endl;  }    //calculate money from the begin of month to the time given  int chargeByTime(int time)  {      int hours = time/60;      int minutes = time%60;      int money = 0;      int i;      for(i = 0;i<hours;i++)          money += charge[i%24]*60;      money += charge[i%24]*minutes;      return money;  }    double calCost(Call s,Call t)  {      return (double)(chargeByTime(t.total)-chargeByTime(s.total))/100;  }    int calLast(Call s,Call t)  {      return (t.date-s.date)*24*60+(t.hour-s.hour)*60+(t.minute-s.minute);  }        int main()  {      for(int i = 0;i<24;i++)          cin>>charge[i];      int N;      cin>>N;      while(N--)      {          Call c;          cin>>c.name;          cin>>c.month;          getchar();          cin>>c.date;          getchar();          cin>>c.hour;          getchar();          cin>>c.minute;          c.total = c.minute + 60*c.hour + 24*60*c.date;          cin>>c.status;          all_calls.push_back(c);      }      sort(all_calls.begin(),all_calls.end(),compare);        //filter delete those bad record      bool haveonline = false;      string curname;      for(int i=0;i<all_calls.size();i++)      {          if(haveonline == false && all_calls[i].status =="on-line" )          {              format_calls.push_back(all_calls[i]);              haveonline = true;              curname = all_calls[i].name;          }          else if(haveonline == true && all_calls[i].status =="on-line")          {              format_calls.pop_back();              format_calls.push_back(all_calls[i]);              haveonline = true;              curname = all_calls[i].name;          }          else if(haveonline == true && all_calls[i].status =="off-line"&&all_calls[i].name ==curname)          {              format_calls.push_back(all_calls[i]);              haveonline = false;          }      }      //the last must be offline      if((*(format_calls.end()-1)).status == "on-line")          format_calls.pop_back();        //output      double totalcost = 0;      curname = "";      for(int i=0;i<format_calls.size();i+=2)      {            if(format_calls[i].name != curname)          {              if(curname!="")              {                  printf("Total amount: $%.2f\n",totalcost);                  totalcost = 0;                  printf("%s %02d\n",format_calls[i].name.c_str(),format_calls[i].month);              }              else              {                  printf("%s %02d\n",format_calls[i].name.c_str(),format_calls[i].month);              }              curname = format_calls[i].name;          }          printf("%02d:%02d:%02d",format_calls[i].date,format_calls[i].hour,format_calls[i].minute);          printf(" ");          printf("%02d:%02d:%02d",format_calls[i+1].date,format_calls[i+1].hour,format_calls[i+1].minute);          printf(" ");          printf("%d",calLast(format_calls[i],format_calls[i+1]));          printf(" ");          printf("$%.2f\n",calCost(format_calls[i],format_calls[i+1]));          totalcost+=calCost(format_calls[i],format_calls[i+1]);      }      printf("Total amount: $%.2f\n",totalcost);    }  */