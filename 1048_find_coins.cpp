/* Find Coins patID: 1048 *//* first time: 21/25 timeout & wrong answer *//* what you use is binary_search, but this is not the *//* best solution, the perfect method is using search table *//* just consider other geek's code from csdn and *//* that may be perfect using binary_search *//* 2016-6-18  *//* wait! using scanf!rat her than cin... *//* 19:07 25/25 Accepted! just in case target == M/2 but you *//* just find one target, fix that bug,you can reach the perfect */#include<iostream>#include<vector>#include<algorithm>using namespace std;int b_find(vector<int> &vec,int left,int right,int target){	int mid=(left+right)/2;	if(left>right){	   return -1;	}	if(vec[mid]==target){		return 1;	}	else if(vec[mid]<target){	    return b_find(vec,mid+1,right,target);	}	else{		return b_find(vec,left,mid-1,target);	}}int main(){ int N,M; cin>>N>>M; int temp; vector<int> vec; int count = 0; for(int i=0;i<N;i++) { 	scanf("%d",&temp);	if(float(temp)==float(M/2)) count++;    if(temp<M) vec.push_back(temp);	 } sort(vec.begin(),vec.end()); int len=vec.size(); int ans = -1; for(int i=0;i<len;i++){	if(count<=1 && 2*vec[i]==M ) continue;	if(b_find(vec,0,len-1,M-vec[i])==1){		ans = vec[i];		break;	}   } if(ans!=-1) cout<<min(ans,M-ans)<<" "<<max(ans,M-ans)<<endl; else cout<<"No Solution"<<endl; return 0;}/* ********************************** *//* baigui sun from CSDN perfect version /* ********************************** */#include<iostream>  #include<vector>  #define FaceMax 1000    int main()  {      int n, m;      while(scanf("%d%d",&n,&m)!=EOF)      {          //input          std::vector<int> coins;          coins.assign(FaceMax+1, 0);          while(n--)          {              int tmp;              scanf("%d",&tmp);              coins[tmp]++;          }          //search          bool flag = false;          for(int i = 1; i <= m/2; ++i)          {              coins[i]--;              coins[m-i]--;              if(coins[i]>=0 && coins[m-i] >= 0)              {                  printf("%d %d\n",i,m-i);                  flag = true;                  break;              }			        }          //no solution          if(!flag)              printf("No Solution\n");      }  }  