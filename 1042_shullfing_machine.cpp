/* shuffling Machine  *//* Starting time: 2016-6-11 0:32  xinyuan Dormitory   *//* Accepted! 20/20 2016-6-10 16:16 boNan Ahu */#include<iostream>#include<vector>#include<string>#include<sstream>#include<algorithm>using namespace std;typedef struct Card{	string name;	int pos;}Card;bool myComp(const Card &a,const Card &b){	return a.pos<b.pos;}int times;void initOrder(vector<Card> &cards, string str){	Card temp;	string s;	for(int i=1;i<=13;i++){		stringstream ss;		ss<<i;		 s =str+ss.str();		 temp.name=s;		 cards.push_back(temp);	}}int getLastPos(int order[55],int i,int repeat){	if(times==repeat){		return i;	} 	else{		times++;	    return  getLastPos(order,order[i],repeat);   //why no return here, there will be some problem?	}}int main(){	//freopen("D:\\in.txt","r",stdin);    int k,temp;    cin>>k;    int order[55];	 Card ca;	 string s;	vector<Card> cards;	initOrder(cards,"S");	initOrder(cards,"H");	initOrder(cards,"C");	initOrder(cards,"D");	ca.name="J1";	cards.push_back(ca);	ca.name="J2";	cards.push_back(ca);    for(int i=1;i<=54;i++){		cin>>order[i];	}	for(int i=1;i<=54;i++){		times=0;        cards[i-1].pos=getLastPos(order,i,k);	}	sort(cards.begin(),cards.end(),myComp);	vector<Card>::iterator iter =cards.begin();	cout<<iter->name;	iter++;	for(;iter!=cards.end();iter++){		cout<<" "<<iter->name;	}	cout<<endl;   return 0;	}/*******************************************//* A much more easy version baigui Sun. CSDN *//******************************************//* this code is much more simple than that of yours *//* you'd better research  on its thinking. */#include<iostream>  void OutputWord(int a)  {      int flag = a/13;      if(0 == flag)          printf("S");      else if(1 == flag)          printf("H");      else if(2 == flag)          printf("C");      else if(3 == flag)          printf("D");      else if(4 == flag)          printf("J");        printf("%d", a%13+1);  }  #define NUM 54  int main()  {      int n;      int s[NUM];      int a[NUM];      while( scanf("%d", &n) != EOF )      {          for(int i = 0; i < NUM; ++i)          {              a[i] = i;              scanf("%d", &s[i]);          }          //shuffling  		/* this is worth learning, very simple. */        while(n--)          {              int a_back[NUM];              for(int i = 0; i < NUM; ++i)                  a_back[i] = a[i];              for(int i = 0; i < NUM; ++i)                  a[s[i]-1] = a_back[i];           }          //output          for(int i = 0; i < NUM; ++i)        {              OutputWord(a[i]);              //printf("%d", a[i]);              if(i != NUM-1)                  printf(" ");              else                  printf("\n");          }      }      return 0;  }  