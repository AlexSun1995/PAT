/* 1076. Forwards on Weibo (30) *//* starting time->14:30 *//* Accepted! 30/30 time->15:17*//* easy...bfs */#include<iostream>#include<vector>#include<algorithm>#include<queue>using namespace std;int n,l,k;typedef struct Node{	bool visited;	int level;}Node;/* vec[i] is the vector store useri's followers */vector<vector<int> > vec;vector<Node> users;void initUsers(){	for(int i=1;i<users.size();i++)	{		users[i].visited=false;		users[i].level=0;	}}void bfs(int start){	queue<int> que;	users[start].visited=true;	que.push(start);	int levelCnt=0;	bool flag=false;	int w,cnt;	cnt=0;	while(!que.empty())	{		int cur=que.front();		for(int i=0;i<vec[cur].size();i++)		{			w=vec[cur][i];			if(!users[w].visited)			{			users[w].level=users[cur].level+1;			//cout<<"w:"<<w<<"users[w].level:"<<users[w].level<<endl;			users[w].visited=true;			if(users[w].level>l){				flag=true;				break;			}			que.push(w);            cnt++;						}		}		que.pop();		if(flag) break;	}	cout<<cnt<<endl;}int main(){	freopen("D:\\in.txt","r",stdin);	cin>>n>>l;		vec.resize(n+1);	users.resize(n+1);	int num,v;	for(int i=1;i<=n;i++)	{		cin>>num;		while(num--)		{			cin>>v;			vec[v].push_back(i);		}	}		cin>>k;	int query;	while(k--)	{		initUsers();		cin>>query;		bfs(query);	}    return 0;}