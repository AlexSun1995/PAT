/* 1095. Cars on Campus (30) *//* starting at 2016-8-15 21:00*//* first submit time: 2016-8-15 22:58 27/30 3 point timeout.*/#include<iostream>#include<vector>#include<string>#include<algorithm>#include<set>#include<map>#include<queue>using namespace std;typedef struct Record{	string plate;	int time;	int state;   // 1 stands for in, -1 for out}Record;bool cmp(const Record &a,const Record &b){	return a.time<b.time;}int main(){	freopen("D:\\in.txt","r",stdin);	int n,k;	int h,m,s;	vector<Record> vec;	/* avaliable data set */	vector<Record> vec1;	scanf("%d%d",&n,&k);	vec.resize(n);	string state;	for(int i=0;i<n;i++)	{	   	cin>>vec[i].plate;		scanf("%d:%d:%d",&h,&m,&s);		vec[i].time=h*3600+m*60+s;		cin>>state;		if(state[0]=='i') vec[i].state=1;		else vec[i].state=-1;	}	sort(vec.begin(),vec.end(),cmp);	map<string,int> map1;	map<string,int> timeCnt;	for(int i=0;i<n;i++)	{		if(vec[i].state==1) map1[vec[i].plate]=i;		else if(vec[i].state==-1){			map<string,int>::iterator iter;			iter=map1.find(vec[i].plate);			if(iter!=map1.end()){				vec1.push_back(vec[i]);				vec1.push_back(vec[map1[vec[i].plate]]);				map<string,int>::iterator iter2;				iter2=timeCnt.find(vec[i].plate);				timeCnt[vec[i].plate]+=(vec[i].time-vec[map1[vec[i].plate]].time);				map1.erase(iter);			} 		} 	}	sort(vec1.begin(),vec1.end(),cmp);	int time;	int cnt;	while(k--){ 		scanf("%d:%d:%d",&h,&m,&s);		time=h*3600+m*60+s;		cnt=0;        for(int i=0;i<vec1.size();i++){			if(vec1[i].time>time) break;			else			{			cnt+=vec1[i].state;			} 	 	}        cout<<cnt<<endl;  			}	map<string,int>::iterator iter1; 	int max=-1;    for(iter1=timeCnt.begin();iter1!=timeCnt.end();iter1++)    {		if(iter1->second>max) max=iter1->second; 	}	for(iter1=timeCnt.begin();iter1!=timeCnt.end();iter1++)    { 		if(iter1->second==max){	      cout<<iter1->first<<" ";		} 	}    h=max/3600;	m=(max-h*3600)/60;	s=(max-h*3600-m*60);	printf("%02d:%02d:%02d\n",h,m,s);    return 0;}