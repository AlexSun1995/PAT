/* PAT 1096. Consecutive Factors (20) *//* starting at 2016-8-16 18:00*//* 21:30 18/30*/#include<iostream>#include<cmath>#include<vector>#include<queue>using namespace std;int main(){   long int n;   scanf("%ld",&n);   long int srt=(long)sqrt(double(n));   long sum;   long temp;   bool first=true;   bool find=false;   long front;    queue<long> result;   vector<long> vec;   sum=1;   /* get the possible max size */   for(int i=2;i<srt;i++)   {	   sum*=i;	   if(sum>n) break;	   else result.push(i);   }   int len=result.size();   for(int i=len;i>=1;i--)   {	  // cout<<"we now consider: "<<i<<endl;	   for(int j=2;j<=n-i;j++)	   {              sum=j;		   vec.clear();		   vec.push_back(j);		   for(int k=1;k<i;k++)		   {			   sum*=(k+j);			   vec.push_back(k+j);		   }		   if(sum>n) break;		   else if(n%sum==0)		   {			   find=true;			   break;		   }	   }	   if(find) break;   }   cout<<vec.size()<<endl;   cout<<vec[0];   for(int i=1;i<vec.size();i++) cout<<"*"<<vec[i];      cout<<endl;    return 0;	}   /* /* /* /* /* /* /* /*  /* PAT 1096. Consecutive Factors (20) *//* starting at 2016-8-16 18:00*//* 21:30 18/20*/#include<iostream>#include<cmath>#include<vector>#include<queue>using namespace std;int main(){   long int n;   scanf("%ld",&n);   long int srt=(long)sqrt(double(n));   long sum;   long temp;   bool first=true;   bool find=false;   long front;    queue<long> result;   vector<long> vec;   sum=1;   /* get the possible max size */   for(long i=2;i<=n;i++)   {	   sum*=i;	   if(sum>n) break;	   else result.push(i);   }   int len=result.size();   for(int i=len;i>1;i--)    {	  // cout<<"we now consider: "<<i<<endl;	   for(int j=2;j<=n-i;j++)	     {              sum=j;		   vec.clear();		   vec.push_back(j);		   for(int k=1;k<i;k++)		   {			   sum*=(k+j);			   vec.push_back(k+j);		   }		   if(sum>n) break;		   else if(n%sum==0)		   {			   find=true;			   break;		   }	   }	   if(find) break;   }   if(!find){	   cout<<1<<endl<<n<<endl;	   return 0;   }   else{    cout<<vec.size()<<endl;    cout<<vec[0];    for(int i=1;i<vec.size();i++) cout<<"*"<<vec[i];       cout<<endl;      }   return 0;	}   