/* Merge Sort *///14:30#include<iostream>#include<vector>#include<cstdio>#include<algorithm>#include<queue>using namespace std;vector<int> cmp;int n;bool flag=false;void print(vector<int> &vec){	for(int i=0;i<vec.size();i++) printf("%d ",vec[i]);	printf("\n");}void isort(vector<int> &vec1,int left,int right){	for(int i=left+1;i<=right;i++)	{		int j;		int tmp=vec1[i];		for(j=i-1;vec1[j]>tmp&&j>=0;j--)		{			 vec1[j+1]=vec1[j];		}		vec1[j+1]=tmp;		if(flag==true)		{			printf("%d",vec1[0]);			for(int i=1;i<vec1.size();i++) printf(" %d",vec1[i]);			printf("\n");			break;		}		if(vec1==cmp)		{			flag=true;			printf("Insertion Sort\n");		}	}}int main(){	freopen("D:\\in.txt","r",stdin);	vector<int> vec;	scanf("%d",&n);	vec.resize(n);	cmp.resize(n);	for(int i=0;i<n;i++) scanf("%d",&vec[i]);	for(int i=0;i<n;i++) scanf("%d",&cmp[i]);	vector<int> vec2(vec);	isort(vec,0,n-1);	bool find=false;	if(!flag)	{		int step=1;		int from,to;		while(true)		{		   step*=2;		   //cout<<"Debug..."<<"step:"<<step<<endl;		   for(int i=0;i*step<n;i++)	       {			from=i*step;			to=((from+step)<n)?(from+step):n;			//cout<<"from:"<<from<<" to:"<<to<<endl;			sort(vec2.begin()+from,vec2.begin()+to);	   	   }		   if(find)		   {		     printf("%d",vec2[0]);		     for(int i=1;i<vec2.size();i++) printf(" %d",vec2[i]);		     printf("\n");		     break;		   }		   if(cmp==vec2)		   {		   	 find=true;		   	 printf("Merge Sort\n");  		   }			}	}	return 0;}