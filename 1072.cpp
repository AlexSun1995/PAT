/* 1072. Gas Station (30) *//* starting at 2016-9-2 18:29 *//* 26/30 2016-9-2 20:51 too slow! be careful!!!*//* the 4 points mark: expecially the stringstream!*//* Accepted! 30/30*/#include<iostream>#include<vector>#include<algorithm>#include<map>#include<string>#include<sstream>#define INF 9999999using namespace std;typedef struct Edge{	int id;	int dis;	Edge(int _id,int _dis)	{		id=_id;		dis=_dis;	}}Edge;typedef struct Node{	bool visited;	int tdis;}Node;typedef struct resNode{	int id;	int max;	int total;}resNode;vector<vector<Edge> >graph;vector<Node> vec;bool cmp(const resNode &a,const resNode &b){	if(a.max!=b.max)		return a.max>b.max;	else if(a.total!=b.total) 		return a.total<b.total;	else return a.id<b.id;}void init(){	for(int i=1;i<vec.size();i++)	{		vec[i].visited=false;		vec[i].tdis=INF;	}}int find(){	int index1=-1;	int min;	bool firstFind=false;    for(int i=1;i<vec.size();i++)	{		if(!firstFind&&!vec[i].visited){			min=vec[i].tdis;			index1=i;			firstFind=true;		}		else if(firstFind&&!vec[i].visited&&vec[i].tdis<min)		{			min=vec[i].tdis;			index1=i;		}	}   return index1;	}void dijkstra(int start){	//cout<<endl;	int v,w;	vec[start].tdis=0;	while(true)	{		v=find();		if(v==-1) break;		vec[v].visited=true;		for(int i=0;i<graph[v].size();i++)		{	        w=graph[v][i].id;            if(vec[w].tdis>vec[v].tdis+graph[v][i].dis)			{				vec[w].tdis=vec[v].tdis+graph[v][i].dis;				//cout<<" the w:"<<w<<"the tds: "<<vec[w].tdis<<endl;			}						}	   // cout<<"********"<<endl;	}}int main(){	freopen("D:\\in.txt","r",stdin);	int n,m,k,ds;	scanf("%d%d%d%d",&n,&m,&k,&ds);	int num=n+m;	graph.resize(num+5);	vec.resize(num+5);	map<string,int> gmap;	map<int,string> rgmap;	for(int i=1;i<=m;i++)	{		/* mark! key point!! */		string tg="G";		stringstream ss;		ss<<i;		string str=tg+ss.str();        gmap[str]=n+i;		rgmap[n+i]=str;	}	string a,b;	int a1,b1;	int dis;	for(int i=0;i<k;i++)	{		cin>>a>>b>>dis;		if(a[0]=='G') a1=gmap[a];	    if(b[0]=='G') b1=gmap[b];		if(a[0]!='G')		{			stringstream ss(a);			ss>>a1;		}		if(b[0]!='G')		{			stringstream ss1(b);			ss1>>b1;		}		graph[a1].push_back(Edge(b1,dis));		graph[b1].push_back(Edge(a1,dis));	}	vector<resNode> res;	for(int i=1;i<=m;i++)	{		init();		dijkstra(i+n);		int cnt=0;		int min=vec[1].tdis;		int flag=true;		for(int j=1;j<=n;j++)		{			if(vec[j].tdis>ds)			{				flag=false;				break;			}			else			{				if(vec[j].tdis<min)				{					min=vec[j].tdis;				}				if(vec[j].tdis!=INF)				   cnt+=vec[j].tdis;			}		}		if(flag)		{		  resNode t;		  t.total=cnt;	      t.id=i+n;		  t.max=min;		  res.push_back(t);				}	}	sort(res.begin(),res.end(),cmp);	if(res.size()==0)	{		printf("No Solution\n");	}	else	{		printf("%s\n",rgmap[res[0].id].c_str());		printf("%.1f %.1f\n",(float)res[0].max,(res[0].total*1.0)/(n));	}	return 0;}