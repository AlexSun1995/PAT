/* Prime Factors PatId:1059 *//* 2016-7-22 ahu library *//* Running for PAT! *//* 23/25 reason unknown... */#include<iostream>#include<stack>#include<queue>#include<cmath>#include<vector>#include<algorithm>using namespace std;vector<long int> vec;bool isPrime(long int a){	//cout<<"hello"<<endl;	bool flag=true;	int sqr_a=(int)sqrt(a);	//cout<<"sqrt a=="<<sqr_a<<endl;	for(int i=2;i<=sqr_a;i++){		//cout<<"we test "<<i<<endl;		if(a%i==0){			flag=false;			break;		}	}	return flag;}void getPrimeFactor(long int n){	if(isPrime(n)){		vec.push_back(n);		return;	}	else{		long int sqr_n=(long int)sqrt(n);		for(int i=2;i<=sqr_n;i++){			if(isPrime(i)&&n%i==0){				vec.push_back(i);				getPrimeFactor(n/i);				break;			}		}	}}int main(){	long int n;	scanf("%ld",&n);	getPrimeFactor(n);	sort(vec.begin(),vec.end());	long int cur_prime=vec[0];	long int same_count=1;	bool first=true;	printf("%ld=",n);	for(int i=1;i<vec.size();i++){		if(vec[i]==cur_prime)		{			same_count++;			continue;		}		else if(vec[i]!=cur_prime){			if(same_count==1&&first){				printf("%ld",cur_prime);				first=false;			}			else if(same_count==1&&!first){				printf("*%ld",cur_prime);			}			else if(same_count!=1&&first){				printf("%ld^%ld",cur_prime,same_count);				first=false;			}			else if(same_count!=1&&!first){				printf("*%ld^%ld",cur_prime,same_count);			}			cur_prime=vec[i];			same_count=1;		}	}	if(same_count==1)	{		if(vec.size()==1)		printf("%ld\n",cur_prime);		else printf("*%ld\n",cur_prime);	}	else{		printf("*%ld^%ld\n",cur_prime,same_count);	}	return 0;}