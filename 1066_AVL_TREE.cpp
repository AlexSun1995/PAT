/* Building of an AVL Tree *//* this is important to learn by heart! *//* PAT ID:1066 */#include<iostream>#include<vector>using namespace std;typedef struct Node{	int key;	Node *left;	Node *right;}Node;Node *singleLeftRotate(Node *A){	Node *B=A->left;	A->left=B->right;	B->right=A;	return B;}Node *singleRightRotate(Node *A){	Node *B=A->right;	A->right=B->left;	B->left=A;	return B;}Node *doubleLeftRightRotate(Node *A){	A->left=singleRightRotate(A->left);	return singleLeftRotate(A);}Node *doubleRightLeftRotate(Node *A){	A->right=singleLeftRotate(A->right);	return singleRightRotate(A);}Node *initTree(int key){	Node *head;	head=(Node *)malloc(sizeof(Node));	head->key=key;	head->left=NULL;	head->right=NULL;	return head;}int height(Node *head){	if(head==NULL){		return 0;	}	else if(head->left==NULL&&head->right==NULL){		return 1;	} 	else if(!head->left&&head->right){		return height(head->right)+1;	}	else if(!head->right&&head->left){		return height(head->left)+1;	}	else{		return max(height(head->left),height(head->right))+1;	}}Node *insert(int key,Node *head){	if(head==NULL){       // cout<<"yes it's Null"<<endl;				head=initTree(key);	}	else if(key<head->key){		head->left=insert(key,head->left);		if(height(head->left)-height(head->right)==2){			if(key<head->left->key){			   head=singleLeftRotate(head);				}			else{				head=doubleLeftRightRotate(head);			}		}	}	else if(key>head->key){		head->right=insert(key,head->right);		if(height(head->right)-height(head->left)==2){			if(key>head->right->key){				head=singleRightRotate(head);			}			else{				head=doubleRightLeftRotate(head);			}		}	}	return head;}int main(){	freopen("D:\\in.txt","r",stdin);	Node *AVLTree;	int n;	vector<int> vec;	scanf("%d",&n);	vec.resize(n);	AVLTree=NULL;	for(int i=0;i<n;i++){		scanf("%d",&vec[i]);		AVLTree=insert(vec[i],AVLTree);		//cout<<"AVL KEY "<<AVLTree->key<<endl;	}	printf("%d\n",AVLTree->key);	return 0;}