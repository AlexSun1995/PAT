/* PAT Ranking *//* starting time: 2016-6-13 22:54*//* Accepted! 2016-6-13 23:55 *//* Be carefully!!! */#include<iostream>#include<vector>#include<algorithm>#include<string>using namespace std;typedef struct Testee{   string id;   int loc_test;   int score;   int total_rank;   int local_rank;}Testee;bool myComp(const Testee &a,const Testee &b){	if(a.loc_test!=b.loc_test) return a.loc_test<b.loc_test;	else return a.score>b.score;}bool myComp2(const Testee &a,const Testee &b){	if(a.score!=b.score) return a.score>b.score;	else return a.id<b.id;}int main(){	//freopen("D:\\in.txt","r",stdin);	int n;	int k;	cin>>n;	vector<Testee> vec;	Testee temp;	for(int i=1;i<=n;i++){		cin>>k;		while(k--){			cin>>temp.id;			cin>>temp.score;			temp.loc_test = i;			vec.push_back(temp);		}	}	/* first sort,id first */	sort(vec.begin(),vec.end(),myComp);	vector<Testee>::iterator iter = vec.begin();	int rankPointer=0;	int loc_flag = iter->loc_test;	int score_flag = -1;	int count = 0;	for(;iter!=vec.end();iter++)	{         count++;		if(iter->loc_test==loc_flag){            if(iter->score!=score_flag){				rankPointer=count;				score_flag = iter->score;				iter->local_rank = rankPointer;			}            else iter->local_rank = rankPointer;					}		else{		    rankPointer = 1;			count=1;			loc_flag=iter->loc_test;			iter->local_rank=rankPointer;			score_flag = iter->score;		}	}	/* second time sort, score first */	sort(vec.begin(),vec.end(),myComp2);	vector<Testee>::iterator iter1 = vec.begin();	rankPointer = 0;	score_flag = -1;	count = 0;	cout<<vec.size()<<endl;	for(;iter1!=vec.end();iter1++){		count++;		if(iter1->score!=score_flag){			rankPointer = count;			iter1->total_rank=rankPointer;			score_flag=iter1->score;		}		else iter1->total_rank = rankPointer;			cout<<iter1->id<<" "<<iter1->total_rank<<" ";		cout<<iter1->loc_test<<" "<<iter1->local_rank<<endl;	}	return 0;}