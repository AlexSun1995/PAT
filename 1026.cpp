/* 1026. Table Tennis (30) *//* starting at 2016-9-3 15:17 PM*//* 15/30 *//* I've tried,but a little hard...leave it alone..*/#include<iostream>#include<vector>#include<algorithm>#include<queue>#include<map>#include<set>using namespace std;typedef struct Info{	int arrive;	int playTime;	bool vip;}Info;typedef struct Table{	bool vip;	bool taken;    // nearst time to provide service	int st;  }Table;bool cmp(const Info &a,const Info &b){	return a.arrive<b.arrive;}bool cmp2(const int &a,const int &b){ 	return a>b;} vector<Info> vec;vector<Table> tab;void initTable(){	for(int i=0;i<tab.size();i++)	{		tab[i].vip=false;		tab[i].taken=false;		tab[i].st=8*3600;	}}int print(Info inf,int st){	if(st>=21*3600) return -1;	int h,m,s;	if(st<inf.arrive) st=inf.arrive;	h=inf.arrive/3600;	m=(inf.arrive-h*3600)/60;	s=inf.arrive-h*3600-m*60;	printf("%02d:%02d:%02d ",h,m,s);	h=st/3600;	m=(st-h*3600)/60; 	s=st-h*3600-m*60;	printf("%02d:%02d:%02d ",h,m,s);	printf("%d\n",(int)((st-inf.arrive)*1.0/60+0.5));	return 1;}int main(){   int n,k,m,vid;  freopen("D:\\in.txt","r",stdin);  cin>>n;   vec.resize(n);  int h,mi,s,t,v;  for(int i=0;i<n;i++)  {	scanf("%d:%d:%d %d %d",&h,&mi,&s,&t,&v);	vec[i].arrive=h*3600+mi*60+s;	vec[i].playTime=t*60;    v==1?vec[i].vip=true:vec[i].vip=false;  }  scanf("%d%d",&k,&m);  vector<int> ans(k+1,0);  tab.resize(k+1);  initTable();  for(int i=1;i<=m;i++)  {	  scanf("%d",&vid);	  tab[vid].vip=true;  }  sort(vec.begin(),vec.end(),cmp);  queue<Info> queV;  queue<Info> queN;  /* get the vip queue */  for(int i=0;i<vec.size();i++)  {	 if(vec[i].vip==true)	 {		 queV.push(vec[i]);	 }     else queN.push(vec[i]);   }  Info curv,curn;  bool flag;  while(!queV.empty()&&!queN.empty())  {	  curv=queV.front();	  curn=queN.front();	  flag=false;	  for(int i=1;i<=k;i++)	  {		 // cout<<"***table"<<i<<" "<<tab[i].taken<<endl;		if(!tab[i].taken&&!tab[i].vip)		{			if(curn.arrive<curv.arrive)			{				if(print(curn,tab[i].st)!=-1) ans[i]++;				tab[i].st=curn.arrive+curn.playTime;				queN.pop();			}			else			{				if(print(curv,tab[i].st)!=-1) ans[i]++;				tab[i].st=curv.arrive+curv.playTime;				queV.pop();			}			flag=true;			tab[i].taken=true;			break;		}		if(!tab[i].taken&&tab[i].vip)		{			if(curv.arrive<=tab[i].st)			{				if(print(curv,tab[i].st)!=-1) ans[i]++;				tab[i].st=curv.arrive+curv.playTime;				queV.pop();  			}			else if(curn.arrive<curv.arrive)			{				if(print(curn,tab[i].st)!=-1) ans[i]++;				tab[i].st=curn.arrive+curn.playTime;				queN.pop();			}			else{				if(print(curv,tab[i].st)!=-1) ans[i]++;				tab[i].st=curv.arrive+curv.playTime;				queV.pop();			}			flag=true;			tab[i].taken=true;			break;		}	  }	  /* all tables are taken.*/	  if(!flag)	  {		 int min=tab[1].st;		 int mini=1;         for(int i=1;i<=k;i++)		 {			 if(min>tab[i].st){				 min = tab[i].st;				 mini=i;			 }		 }         tab[mini].taken=false;		 		 //cout<<"mark"<<endl;	  }  }  while(!queN.empty())  {	  curn=queN.front();	  flag=false;	  for(int i=1;i<=k;i++)	  {		if(!tab[i].taken)		{			if(print(curn,tab[i].st)!=-1) ans[i]++;			tab[i].st= curn.arrive+curn.playTime;			queN.pop();			flag=true;			tab[i].taken=true;			break;		}	  }	  if(!flag)	  {		 int min=tab[1].st;		 int mini=1;         for(int i=1;i<=k;i++)		 {			 if(min>tab[i].st){				 min = tab[i].st;				 mini=i;			 }		 }         tab[mini].taken=false;		 	  }  }  while(!queV.empty())  {      curv=queV.front();	  flag=false;	  for(int i=1;i<=k;i++)	  {		if(!tab[i].taken)		{			if(print(curv,tab[i].st)!=-1) ans[i]++;			tab[i].st= curv.arrive+curv.playTime;			queV.pop();			flag=true;			tab[i].taken=true;			break;		}	  }      if(!flag)	  {		 int min=tab[1].st;		 int mini=1;         for(int i=1;i<=k;i++)		 {			 if(min>tab[i].st)			 {				 min = tab[i].st;				 mini=i;			 }			 }         tab[mini].taken=false;		 	   }	    }  sort(ans.begin()+1,ans.end(),cmp2);  cout<<ans[1];  for(int i=2;i<=k;i++) cout<<" "<<ans[i];  cout<<endl;  return 0;	}