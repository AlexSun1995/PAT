/* 1097. Deduplication on a Linked List (25) *//* 25/25 */#include<iostream>#include<cmath>#include<vector>#include<queue>#include<algorithm>#include<map>#include<set>using namespace std;typedef struct Node{	int key;	int add;    int next;}Node;int main(){	freopen("D:\\in.txt","r",stdin);	int n,start;	scanf("%d%d",&start,&n);	vector<Node> vec;	vector<Node> vec1;	vector<Node> vec2;	map<int,int> map1;	vec.resize(n);	for(int i=0;i<n;i++)	{	  scanf("%d%d%d",&vec[i].add,&vec[i].key,&vec[i].next);      map1.insert(make_pair(vec[i].add,i));	  	}	set<int> set1;	set<int>::iterator iter;	int cur;	int pos=start;    while(pos!=-1)	{		cur=vec[map1[pos]].key;        int temp;		cur<0?temp=(0-cur):temp=cur;        iter=set1.find(temp);		if(iter==set1.end())		{			vec1.push_back(vec[map1[pos]]);			set1.insert(temp);		}		else if(iter!=set1.end())		{			vec2.push_back(vec[map1[pos]]);		}		pos=vec[map1[pos]].next;	}	for(int i=0;i<vec1.size();i++)	{		if(i<vec1.size()-1)		{			printf("%05d %d %05d\n",vec1[i].add,vec1[i].key,vec1[i+1].add);		}		else printf("%05d %d %d\n",vec1[i].add,vec1[i].key,-1);	}	for(int i=0;i<vec2.size();i++)	{		if(i<vec2.size()-1)		{			printf("%05d %d %05d\n",vec2[i].add,vec2[i].key,vec2[i+1].add);		}		else printf("%05d %d %d\n",vec2[i].add,vec2[i].key,-1);	}   return 0;	}   