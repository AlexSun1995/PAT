/* PatID:1022 Digital Library *//* Running for PAT! *//* starting time: 2016-7-15 9:45AM in AHU Bobei */#include<iostream>#include<vector>#include<map>#include<set>#include<sstream>#include<algorithm>using namespace std;typedef struct Book{	string ID;	char title[80];	char author[80];    vector<string> keywors;	char publisher[80];	int publish_year;}Book;int main(){	freopen("D:\\in.txt","r",stdin);	multimap<string,string> title2ID;	multimap<string,string> author2ID;	multimap<string,string> publisher2ID;	multimap<string,string> year2ID;	multimap<string,string> key2ID;	int n;	string title,author,publisher,keywords;	string year;	string key;	scanf("%d\n",&n);   // mark, very important..	while(n--){		string id;		getline(cin,id);		//getchar();		getline(cin,title);		//cout<<"*****title"<<title<<endl;		getline(cin,author);		//cout<<"*****author"<<author<<endl;		getline(cin,keywords);		getline(cin,publisher);		getline(cin,year);		title2ID.insert(make_pair(title,id));		author2ID.insert(make_pair(author,id));		publisher2ID.insert(make_pair(publisher,id));		year2ID.insert(make_pair(year,id));		stringstream ss(keywords);		while(ss>>key){			key2ID.insert(make_pair(key,id));		}	}    int lines;	int model;	string cmd;	string finding_key;	scanf("%d\n",&lines);	while(lines--){		getline(cin,cmd);		stringstream ss1;		//cout<<"*****"<<cmd<<endl;		ss1<<cmd.substr(0,1);		ss1>>model;		cout<<"DEBUG..MODEL:"<<model<<endl;		finding_key=cmd.substr(3);		switch(model){			case 1:{		    cout<<cmd<<endl; 			//title2ID.find(finding_key);			multimap<string,string>::iterator beg,end,iter;			beg=title2ID.lower_bound(finding_key);			end=title2ID.upper_bound(finding_key);			if(beg!=title2ID.end())			for(iter=beg;iter!=end;iter++) cout<<iter->second<<endl;			else cout<<"Not Found"<<endl;			break;			}			case 2:			{				   cout<<cmd<<endl; 			//title2ID.find(finding_key);			multimap<string,string>::iterator beg,end,iter;			beg=author2ID.lower_bound(finding_key);			end=author2ID.upper_bound(finding_key);			if(beg!=author2ID.end())			for(iter=beg;iter!=end;iter++) cout<<iter->second<<endl;			else cout<<"Not Found"<<endl;			break;			}			case 3:			{			printf("%s\n",cmd.c_str());			multimap<string,string>::iterator beg,end,iter;			printf("the finding key: %s",finding_key.c_str());			beg=key2ID.lower_bound(finding_key);			end=key2ID.upper_bound(finding_key);			if(beg!=key2ID.end())			for(iter=beg;iter!=end;iter++){				cout<<iter->second<<endl;			} 			else cout<<"Not Found"<<endl;			break;			}				case 4:			{		    cout<<cmd<<endl; 			multimap<string,string>::iterator beg,end,iter;			beg=publisher2ID.lower_bound(finding_key);			end=publisher2ID.upper_bound(finding_key);			if(beg!=publisher2ID.end())			for(iter=beg;iter!=end;iter++) cout<<iter->second<<endl;			else cout<<"Not Found"<<endl;			break;			}			case 5:			{		     cout<<cmd<<endl; 			//title2ID.find(finding_key);			multimap<string,string>::iterator beg,end,iter;			beg=year2ID.lower_bound(finding_key);			end=year2ID.upper_bound(finding_key);			//for(iter=beg;iter!=end;iter++) cout<<iter->second<<endl;            if(beg!=year2ID.end())			for(iter=beg;iter!=end;iter++) cout<<iter->second<<endl;			else cout<<"Not Found"<<endl;						break;			}			default: break;		}	}	return 0;}